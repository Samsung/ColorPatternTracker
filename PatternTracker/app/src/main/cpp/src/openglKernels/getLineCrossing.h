static const char *getLineCrossing_kernel =
"#version 310 es\n"
"\n"
"#extension GL_ANDROID_extension_pack_es31a : require\n"
"layout(local_size_x = 1, local_size_y = 1) in;\n"
"layout(binding=0, rgba32f) uniform mediump readonly image2D input_image;\n"
"layout(std430, binding = 2) buffer loc_ssbo {float loc[];};\n"
"layout(std430, binding = 3) buffer endPtIds_ssbo {int endPtIds[];};\n"
"layout(std430, binding = 4) buffer finalLoc_ssbo {float finalLoc[];};\n"
"void main()\n"
"{\n"
"\t\tint id_org = int(gl_GlobalInvocationID.x);\n"
"\t\tint endId1 = endPtIds[id_org*2];\n"
"\t\tint endId2 = endPtIds[id_org*2+1];\n"
"\t\t\n"
"\t\tfloat x1 = loc[2*endId1];\n"
"\t\tfloat y1 = loc[2*endId1+1];\n"
"\t\t\n"
"\t\tfloat x2 = loc[2*endId2];\n"
"\t\tfloat y2 = loc[2*endId2+1];\n"
"\t\t\n"
"\t\tfloat d = sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\n"
"\t\t\n"
"\t\tfloat x=(x1+x2)/2.0;\n"
"\t\tfloat y=(y1+y2)/2.0;\n"
"	float px = x;\n"
"	float py = y;\n"
"	\n"
"\t\t//shrinkLine(x1,x2,y1,y2,d,input_image, &x, &y);\n"
"	ivec2 pos1,pos2;\n"
"\t\tvec4 pf1Base,pf2Base,pf1, pf2, pfm;\n"
"\t\t\n"
"\t\tfloat dirx = (x2-x1)/d;\n"
"\t\tfloat diry = (y2-y1)/d;\n"
"\t\t\n"
"\t\tpos1.y=int(floor(x1+0.5f));\n"
"\t\tpos1.x=int(floor(y1+0.5f));\n"
"\t\tpos2.y=int(floor(x2+0.5f));\n"
"\t\tpos2.x=int(floor(y2+0.5f));\n"
"\n"
"	pf1Base = imageLoad(input_image, pos1);\n"
"	pf2Base = imageLoad(input_image, pos2);\n"
"\t\t//pf1Base = read_imagef(input_image, sampler, pos1);\n"
"\t\t//pf2Base = read_imagef(input_image, sampler, pos2);\n"
"\t\t\n"
"\t\tpf1=pf1Base.xyzw;\n"
"\t\t\n"
"\t\tfloat step1=0.0;\n"
"\t\twhile((abs(pf1.x-pf1Base.x)+abs(pf1.y-pf1Base.y)+abs(pf1.z-pf1Base.z)) < (abs(pf1.x-pf2Base.x)+abs(pf1.y-pf2Base.y)+abs(pf1.z-pf2Base.z))){\n"
"\t\t\t\tstep1+=1.0;\n"
"\t\t\t\td-=1.0;\n"
"\t\t\t\tpos1.y = int(floor(x1+dirx*step1+0.5));\n"
"\t\t\t\tpos1.x = int(floor(y1+diry*step1+0.5));\n"
"		pf1 = imageLoad(input_image, pos1);\n"
"\t\t\t\t//pf1 = read_imagef(input_image, sampler, pos1);\t\t\t\t\n"
"\t\t}\n"
"\t\tfloat stepl=step1-1.0;\n"
"\t\tfloat stepr=step1;\n"
"\t\t\n"
"\t\tivec2 posl,posr;\n"
"\t\tposl.x=pos1.x;\n"
"\t\tposl.y=pos1.y;\n"
"\t\tposr.x=pos1.x;\n"
"\t\tposr.y=pos1.y;\n"
"\t\t\n"
"\t\tint dir_shift=1;\n"
"\t\tint count_shift=0;\n"
"\t\tfor(int i=0;i<5;i++){\n"
"\t\t\t\tstep1+=1.0;\n"
"\t\t\t\tpos1.y = int(floor(x1+dirx*step1+0.5));\n"
"\t\t\t\tpos1.x = int(floor(y1+diry*step1+0.5));\n"
"\t\t\t\tif(pos1.x>=0 && pos1.x<1920 && pos1.y>=0 && pos1.y<1080){\n"
"			pf1 = imageLoad(input_image, pos1);\n"
"\t\t\t\t\t\t//pf1 = read_imagef(input_image, sampler, pos1);\t \n"
"\t\t\t\t\t\tif(dir_shift==1){\t\t\n"
"\t\t\t\t\t\t\t\tif((abs(pf1.x-pf1Base.x)+abs(pf1.y-pf1Base.y)+abs(pf1.z-pf1Base.z)) < (abs(pf1.x-pf2Base.x)+abs(pf1.y-pf2Base.y)+abs(pf1.z-pf2Base.z))){\n"
"\t\t\t\t\t\t\t\t\t\tdir_shift=-1;\t\t \n"
"\t\t\t\t\t\t\t\t\t\tposr.x=pos1.x;\n"
"\t\t\t\t\t\t\t\t\t\tposr.y=pos1.y;\n"
"\t\t\t\t\t\t\t\t\t\tcount_shift++;\n"
"\t\t\t\t\t\t\t\t}\n"
"\t\t\t\t\t\t\t\t}else{\n"
"\t\t\t\t\t\t\t\t if((abs(pf1.x-pf1Base.x)+abs(pf1.y-pf1Base.y)+abs(pf1.z-pf1Base.z)) > (abs(pf1.x-pf2Base.x)+abs(pf1.y-pf2Base.y)+abs(pf1.z-pf2Base.z))){\n"
"\t\t\t\t\t\t\t\t\t\tdir_shift=1;\n"
"\t\t\t\t\t\t\t\t\t\tposr.x=pos1.x;\n"
"\t\t\t\t\t\t\t\t\t\tposr.y=pos1.y;\n"
"\t\t\t\t\t\t\t\t\t\tcount_shift++;\n"
"\t\t\t\t\t\t\t\t}\n"
"\t\t\t\t\t\t}\n"
"\t\t\t\t}\n"
"\t\t} \n"
"\t\t\n"
"\t\tif(count_shift>0){\n"
"\t\t\t\t\t\tpy = floor((float(posl.x)+float(posr.x))/2.0);\n"
"\t\t\t\t\t\tpx = floor((float(posl.y)+float(posr.y))/2.0);\n"
"\t\t\t\t}else{\n"
"\t\t\t\t\t\tposl.y = int(floor(x1+dirx*stepl+0.5));\n"
"\t\t\t\t\t\tposl.x = int(floor(y1+diry*stepl+0.5));\n"
"			pf1 = imageLoad(input_image, posl);\n"
"\t\t\t\t\t\t//pf1 = read_imagef(input_image, sampler, posl);\t\t \n"
"\t\t\t\t\t\tfloat val_left = abs((abs(pf1.x-pf1Base.x)+abs(pf1.y-pf1Base.y)+abs(pf1.z-pf1Base.z)) - (abs(pf1.x-pf2Base.x)+abs(pf1.y-pf2Base.y)+abs(pf1.z-pf2Base.z)));\n"
"\t\t\t\t\t\t\n"
"\t\t\t\t\t\tposr.y = int(floor(x1+dirx*stepr+0.5));\n"
"\t\t\t\t\t\tposr.x = int(floor(y1+diry*stepr+0.5));\n"
"			pf1 = imageLoad(input_image, posr);\n"
"\t\t\t\t\t\t//pf1 = read_imagef(input_image, sampler, posr);\t\t \n"
"\t\t\t\t\t\tfloat val_right = abs((abs(pf1.x-pf1Base.x)+abs(pf1.y-pf1Base.y)+abs(pf1.z-pf1Base.z)) - (abs(pf1.x-pf2Base.x)+abs(pf1.y-pf2Base.y)+abs(pf1.z-pf2Base.z)));\n"
"\t\t\t\t\t \n"
"\t\t\t\t\t\tif(val_left>0.0 && val_right>0.0){\n"
"\t\t\t\t\t\t\t\tpy = (val_right*float(posl.x)+val_left*float(posr.x))/(val_left+val_right);\n"
"\t\t\t\t\t\t\t\tpx = (val_right*float(posl.y)+val_left*float(posr.y))/(val_left+val_right);\n"
"\t\t\t\t\t\t\t\t}else{\n"
"\t\t\t\t\t\t\t\tif(val_left==-0.0 || val_left==0.0){\n"
"\t\t\t\t\t\t\t\t\t\tpy=float(posl.x);\n"
"\t\t\t\t\t\t\t\t\t\tpx=float(posl.y);\n"
"\t\t\t\t\t\t\t\t}\n"
"\t\t\t\t\t\t\t\tif(val_right==-0.0 || val_right==0.0){\n"
"\t\t\t\t\t\t\t\t\t\tpy=float(posr.x);\n"
"\t\t\t\t\t\t\t\t\t\tpx=float(posr.y);\n"
"\t\t\t\t\t\t\t\t}\n"
"\t\t\t\t\t\t}\n"
"\t\t}\n"
"\t\tx=px;\n"
"	y=py;\n"
"\t\tfinalLoc[2*id_org]\t = x;\n"
"\t\tfinalLoc[2*id_org+1] = y;\n"
"}\n"
;
