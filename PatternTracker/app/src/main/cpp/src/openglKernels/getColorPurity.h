static const char *getColorPurity_kernel =
"#version 310 es\n"
"#define LOCAL_SIZE 1\n"
"\n"
"#extension GL_ANDROID_extension_pack_es31a : require\n"
"layout(local_size_x = 128, local_size_y = 8) in;\n"
"layout(binding=0, rgba32f) uniform mediump readonly image2D input_image;\n"
"layout(binding=1, rgba32f) uniform mediump writeonly image2D output_image;\n"
"layout(std430, binding = 2) buffer P_ssbo {int P[];};\n"
"layout(std430, binding = 3) buffer params_int_ssbo {int params_int[];};\n"
"void main()\n"
"{\n"
"	int sz_blk = params_int[0];\n"
"	int skip = params_int[1];\n"
"	\n"
"	ivec2 pos;\n"
"\t\tvec4 pixelf;\n"
"\t\tint idx, idy, id, id_blk;\n"
"\t\t\n"
"	int sz_x = int(gl_NumWorkGroups.x*gl_WorkGroupSize.x);\n"
"\t\tint sz_y = int(gl_NumWorkGroups.y*gl_WorkGroupSize.y);\n"
"	\n"
"\t\tidx = int(gl_GlobalInvocationID.x);\n"
"\t\tidy = int(gl_GlobalInvocationID.y);\n"
"\t\t\n"
"\t\tid_blk = idy*sz_x+idx;\n"
"\n"
"\t\tidx *= sz_blk;\n"
"\t\tidy *= sz_blk;\n"
"\t\t\n"
"\t\tsz_x *= sz_blk;\n"
"\t\tsz_y *= sz_blk;\n"
"\t\t\n"
"\t\tfloat v_avg=0.0;\n"
"\t\tint count=0;\n"
"\t\tfor(int i=0;i<sz_blk;i+=skip){\n"
"\t\t\t\tfor(int j=0;j<sz_blk;j+=skip){\n"
"\t\t\t\t\t\tpos.x = idx+i;\n"
"\t\t\t\t\t\tpos.y = idy+j;\n"
"			pixelf = imageLoad(input_image, pos);\n"
"			//vec4 pixelfo = vec4(1.0f,1.0f,1.0f,1.0f);\n"
"			//imageStore(output_image, pos, pixelfo);\n"
"			\n"
"\t\t\t\t\t\t//pixelf = read_imagef(input_image, sampler, pos);\n"
"\t\t\t\t\t\t\n"
"\t\t\t\t\t\tfloat gr = (pixelf.x + pixelf.y + pixelf.z)/3.0;\n"
"\t\t\t\t\t\t\n"
"\t\t\t\t\t\tif(gr<0.2)continue;\n"
"\t\t\t\t\t\t\n"
"\t\t\t\t\t\tif(pixelf.x >= pixelf.y && pixelf.y >= pixelf.z){\n"
"\t\t\t\t\t\t\t\tv_avg += (pixelf.x - pixelf.y)/gr;\n"
"\t\t\t\t\t\t}\n"
"\t\t\t\t\t\tif(pixelf.x >= pixelf.z && pixelf.z >= pixelf.y){\n"
"\t\t\t\t\t\t\t\tv_avg += (pixelf.x - pixelf.z)/gr;\n"
"\t\t\t\t\t\t}\n"
"\t\t\t\t\t\tif(pixelf.y >= pixelf.z && pixelf.z >= pixelf.x){\n"
"\t\t\t\t\t\t\t\tv_avg += (pixelf.y - pixelf.z)/gr;\n"
"\t\t\t\t\t\t}\n"
"\t\t\t\t\t\tif(pixelf.y >= pixelf.x && pixelf.x >= pixelf.z){\n"
"\t\t\t\t\t\t\t\tv_avg += (pixelf.y - pixelf.x)/gr;\n"
"\t\t\t\t\t\t}\n"
"\t\t\t\t\t\tif(pixelf.z >= pixelf.x && pixelf.x >= pixelf.y){\n"
"\t\t\t\t\t\t\t\tv_avg += (pixelf.z - pixelf.x)/gr;\n"
"\t\t\t\t\t\t}\n"
"\t\t\t\t\t\tif(pixelf.z >= pixelf.y && pixelf.y >= pixelf.x){\n"
"\t\t\t\t\t\t\t\tv_avg += (pixelf.z - pixelf.y)/gr;\n"
"\t\t\t\t\t\t}\n"
"\t\t\t\t\t\tcount++;\n"
"\t\t\t\t}\n"
"\t\t}\n"
"\n"
"\n"
"\t\tif(count<2){\n"
"\t\t\t\tP[id_blk]=0;\n"
"\t\t\t\treturn;\n"
"\t\t}\n"
"\n"
"\t\tv_avg /= float(count);\n"
"\t\t\n"
"\t\tif(v_avg>0.3){\n"
"\t\t\t\tP[id_blk]=1;\n"
"\t\t\t\t}else{\n"
"\t\t\t\tP[id_blk]=0;\n"
"\t\t}\n"
"	\n"
"	// if(P[id_blk]==1){\n"
"		// for(int i=0;i<sz_blk;i+=skip){\n"
"			// for(int j=0;j<sz_blk;j+=skip){\n"
"				// pos.x = idx+i;\n"
"				// pos.y = idy+j;\n"
"				// vec4 pixelfo = vec4(1.0f,1.0f,1.0f,1.0f);\n"
"				// imageStore(output_image, pos, pixelfo);\n"
"			// }\n"
"		// }\n"
"	// }\n"
"}\n";
