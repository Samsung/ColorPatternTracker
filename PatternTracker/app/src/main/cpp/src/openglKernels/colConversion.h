static const char *colConversion_kernel =
"#version 310 es\n"
"\n"
"#extension GL_ANDROID_extension_pack_es31a : require\n"
"layout(local_size_x = 64, local_size_y = 8) in;\n"
"layout(binding=0, rgba32f) uniform mediump readonly image2D input_image;\n"
"layout(binding=1, rgba32f) uniform mediump writeonly image2D output_image;\n"
"layout(std430, binding = 2) buffer D_ssbo {int D[];};\n"
"\n"
"void checkPass();\n"
"void main()\n"
"{	\n"
"	ivec2 pos;\n"
"\t\t\n"
"\t\tint R = 1, G=2, B=3;\n"
"\n"
"\t\tint sz_x = int((gl_NumWorkGroups.x*gl_WorkGroupSize.x));\n"
"\t\tint sz_y = int((gl_NumWorkGroups.y*gl_WorkGroupSize.y));\n"
"\t\tpos.x = int((gl_GlobalInvocationID.x));\n"
"\t\tpos.y = int((gl_GlobalInvocationID.y));\n"
"	\n"
"\t\tint id = pos.y*sz_x + pos.x;\n"
"\t\t\n"
"	vec4 pixelf = imageLoad(input_image, pos);\n"
"\t\t\n"
"\t\tfloat cr=pixelf.x;\n"
"\t\tfloat cg=pixelf.y;\n"
"\t\tfloat cb=pixelf.z;\n"
"\n"
"\t\t//if (id >= N) return;\n"
"\n"
"\t\tif ( (cr + cg + cb) < 0.05){ // 0.78\n"
"\t\t\t\tD[id] = 0; \n"
"		vec4 pixelfo = vec4(0.0f,0.0f,0.0f,1.0f);\n"
"		imageStore(output_image, pos, pixelfo);\n"
"\t\t}\n"
"\t\telse{\n"
"\t\t\t\tif (cr > cg){\n"
"\t\t\t\t\t\tif(cr > cb){ \n"
"\t\t\t\t\t\t\t\tD[id] = R;\n"
"				//vec4 pixelfo = vec4(1.0f,0.0f,0.0f,1.0f);\n"
"				//imageStore(output_image, pos, pixelfo);\n"
"\t\t\t\t\t\t}else{ \n"
"\t\t\t\t\t\t\t\tD[id] = B;\n"
"				//vec4 pixelfo = vec4(0.0f,0.0f,1.0f,1.0f);\n"
"				//imageStore(output_image, pos, pixelfo);\n"
"\t\t\t\t\t\t}\n"
"\t\t\t\t}\n"
"\t\t\t\telse{\n"
"\t\t\t\t\t\tif(cg > cb){ \n"
"\t\t\t\t\t\t\t\tD[id] = G;\n"
"				//vec4 pixelfo = vec4(0.0f,1.0f,0.0f,1.0f);\n"
"				//imageStore(output_image, pos, pixelfo);\n"
"\t\t\t\t\t\t}else{ \n"
"\t\t\t\t\t\t\t\tD[id] = B;\n"
"				//vec4 pixelfo = vec4(0.0f,0.0f,1.0f,1.0f);\n"
"				//imageStore(output_image, pos, pixelfo);\n"
"\t\t\t\t\t\t}\n"
"\t\t\t\t}\n"
"\t\t}\n"
"}\n"
;
